{"version":3,"sources":["serviceWorker.js","components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","Cardlist","Info","Cardarray","map","user","index","key","Searchbox","searchchange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchfield","onSearchchange","robots","isPending","filteredInfo","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.cf7aa684.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n\t\t\treturn(\r\n\t\t\t\t\t<div className = 'tc  dib ba bw2 b--gold br3  pa1 ma2  grow '>\t\t\t\t\t\t\r\n\t\t\t\t\t<img alt='img' src={`https://robohash.org/${id}`}className ='w-30' />\t\t\t\t\t\t \r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t<h2> {name} </h2>\r\n\t\t\t\t\t<p> {email} </p>\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\t\r\n\t\t\t\t            );\r\n\t\t\t\t\t           }\r\n\r\n\t\t\t\t\t export default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ( {Info} ) => {\r\n\r\n\tconst Cardarray = Info.map( (user,index) =>\r\n\t      {return(  \r\n\t      \t<Card \r\n\t      \tkey={index} \r\n\t      \tid = {Info[index].id} \r\n\t      \tname={Info[index].name} \r\n\t      \temail={Info[index].email} \r\n\t      \t/>\r\n\t      \t);\r\n\t\t\r\n\t\t\t}\t\t\r\n\t\t\t)\r\n\r\n\treturn(\r\n\t\t\t<div>    \r\n\t\t\t{Cardarray};\r\n\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\texport default Cardlist;\r\n\t","import React from 'react';\r\n\r\nconst Searchbox = ({searchchange}) =>{\r\n\treturn (\r\n\t\t\t<div className = 'tc pa2'>\r\n\t\t\t<input className = 'bw1 pa2 b--navy br3'\r\n\t\t\t type='Search'\r\n\t\t\t placeholder = 'Search here' \r\n\t\t\t onChange = {searchchange}\r\n\t\t\t />\r\n\t\t\t </div>\r\n\t\t);\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style = {{overflow: 'scroll',border:'1px solid white',height: '500px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\r\n\t\t);\r\n\t\t}\r\n\r\n\t\texport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\t\t\tsuper(props);\r\n\t\t\t\tthis.state = {\r\n\t\t\t\t\thasError: false\r\n\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\tcomponentDidCatch(error,info){\r\n\t\t\tthis.setState({hasError: true})\r\n\t\t}\t\t\t\r\n\r\n\trender(){\r\n\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Something is wrong</h1>\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\t\t\t\t\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\nimport Searchbox from '../components/Searchbox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n\r\nimport {setSearchField, requestRobots} from '../actions';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nconst mapstateToProps = state => {\r\n\treturn{\r\n\t\tsearchfield: state.searchRobots.searchfield,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn{\r\n\t\tonSearchchange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\n\r\nclass App extends Component {\r\n\r\n\t\r\n\r\n\r\n\r\n\r\n\r\ncomponentDidMount(){\r\n\r\n\t\t\t\tthis.props.onRequestRobots();\r\n\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\r\nrender(){\r\n\t\t\r\n\t\tconst {searchfield, onSearchchange, robots, isPending} = this.props;\r\n\r\n\t\tconst filteredInfo = robots.filter(info => {\r\n\t\treturn info.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t})\r\n\t\r\n\t\treturn isPending ?\r\n\t\t\t <h1>wait a minute</h1> :\t\t\t\r\n\t\t(\r\n\t\t\t<div>\r\n\t\t\t\r\n\t\t\t<h1 className = 'tc f2'>Robofriends</h1>\r\n\t\t\t<Searchbox searchchange = {onSearchchange}/>\r\n\t\t\t\r\n\t\t\t<Scroll>\r\n\t\t\t<ErrorBoundry>\r\n\t\t\t<Cardlist Info = {filteredInfo}/>\r\n\t\t\t</ErrorBoundry>\r\n\t\t\t</Scroll>\r\n\t\t\t\r\n\t\t\t</div>\t\t\t\r\n\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t   \t\t\t      }\r\n\t\t\t\t\t\t\t\t\t\r\n\r\n\r\n     export default connect(mapstateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\r\n\t\t\t\t\r\n\t\t\t\ttype: CHANGE_SEARCH_FIELD,\r\n\t\t\t\tpayload: text,\r\n\t\t\t\t\r\n}\r\n) \r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\t\t\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\t\r\n\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\n\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\t  searchfield: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch , action={}) => {\r\n\tswitch(action.type) {\r\n\t\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\t\treturn Object.assign({},state,{searchfield: action.payload});\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({},state,{isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({},state,{robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({},state,{error: action.payload,isPending: false })\t\t\r\n\t\t\r\n\t\tdefault:\r\n\t\t\treturn state;\t\r\n\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './containers/App';\n\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {Provider} from 'react-redux';\nimport {searchRobots, requestRobots} from './reducers';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  \t<Provider store={store}>\n    \n  \t\t<App />\n\n  \t</Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}